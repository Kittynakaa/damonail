import React, { useEffect, useMemo, useRef, useState, useCallback } from "react";
import "./AddStore.css"; // ‚¨ÖÔ∏è CSS ‡πÅ‡∏¢‡∏Å‡πÅ‡∏•‡∏∞‡∏ó‡∏≥ scope ‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß

export default function AddStore() {
  // ===== State =====
  const [store, setStore] = useState(() => ({
    id: "store_" + Math.random().toString(36).slice(2, 8),
    name: "",
    area: "",
    address: "",
    mapUrl: "",
    rating: "",
    priceFrom: "",
    hours: "",
    amenities: [],
    images: [],
    tags: [],
    services: [], // {id,name,category,price,minutes,desc}
  }));

  // ===== Refs =====
  const imgFileRef = useRef(null);
  const dropZoneRef = useRef(null);

  // ===== Derived =====
  const progressPct = useMemo(() => {
    let score = 0;
    if (store.name?.trim()) score++;
    if (store.area?.trim()) score++;
    if (store.priceFrom !== "" && Number(store.priceFrom) >= 0) score++;
    if (store.address?.trim()) score++;
    if (store.images.length > 0) score++;
    if (store.services.length > 0) score++;
    return Math.round((score / 6) * 100);
  }, [store]);

  // ===== Helpers =====
  const showToast = useCallback((msg) => {
    const el = document.getElementById("nf-toast");
    if (!el) return;
    el.textContent = msg || "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ üéâ";
    el.classList.add("show");
    setTimeout(() => el.classList.remove("show"), 2200);
  }, []);

  const update = (patch) => setStore((s) => ({ ...s, ...patch }));

  // ===== Images =====
  const renderImages = useMemo(
    () =>
      store.images.slice(0, 4).map((src, i) => (
        <img key={i} src={src} alt="" />
      )),
    [store.images]
  );

  const addImageUrl = (url) => {
    const okExt = /\.(jpg|jpeg|png|webp|gif)(\?.*)?$/i.test(url);
    const isHttps = /^https:\/\//i.test(url);
    if (!okExt) return showToast("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (.jpg/.png/.webp)");
    if (location.protocol === "https:" && !isHttps)
      return showToast("‡∏•‡∏¥‡∏á‡∏Å‡πå http ‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ö‡∏ô https ‚Äî ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ https");
    try {
      new URL(url);
    } catch {
      return showToast("‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    }
    setStore((s) => ({ ...s, images: [...s.images, url] }));
  };

  const handleFiles = (fileList) => {
    const files = Array.from(fileList || []);
    if (!files.length) return;
    const MAX_MB = 8;
    const accept = ["image/jpeg", "image/png", "image/webp", "image/gif"];
    const overs = [];
    const wrong = [];
    files.forEach((f) => {
      if (!accept.includes(f.type)) {
        wrong.push(f.name);
        return;
      }
      if (f.size > MAX_MB * 1024 * 1024) {
        overs.push(f.name);
        return;
      }
      const reader = new FileReader();
      reader.onload = (ev) =>
        setStore((s) => ({ ...s, images: [...s.images, ev.target.result] }));
      reader.readAsDataURL(f);
    });
    if (wrong.length) showToast("‡∏ä‡∏ô‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: " + wrong.join(", "));
    if (overs.length) showToast("‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô " + MAX_MB + "MB: " + overs.join(", "));
  };

  const removeImg = (i) =>
    setStore((s) => {
      const images = s.images.slice();
      images.splice(i, 1);
      return { ...s, images };
    });

  // Drag&Drop
  useEffect(() => {
    const dz = dropZoneRef.current;
    if (!dz) return;
    const prevent = (e) => {
      e.preventDefault();
      e.stopPropagation();
    };
    const onEnter = (e) => {
      prevent(e);
      dz.classList.add("highlight");
    };
    const onLeave = (e) => {
      prevent(e);
      dz.classList.remove("highlight");
    };
    const onDrop = (e) => {
      prevent(e);
      dz.classList.remove("highlight");
      handleFiles(e.dataTransfer.files);
    };

    ["dragenter", "dragover"].forEach((ev) => dz.addEventListener(ev, onEnter));
    ["dragleave", "drop"].forEach((ev) => dz.addEventListener(ev, onLeave));
    dz.addEventListener("drop", onDrop);

    return () => {
      ["dragenter", "dragover"].forEach((ev) => dz.removeEventListener(ev, onEnter));
      ["dragleave", "drop"].forEach((ev) => dz.removeEventListener(ev, onLeave));
      dz.removeEventListener("drop", onDrop);
    };
  }, []);

  // ===== Tags =====
  const removeTag = (i) =>
    setStore((s) => {
      const tags = s.tags.slice();
      tags.splice(i, 1);
      return { ...s, tags };
    });

  // ===== Services =====
  const addSvc = () =>
    setStore((s) => ({
      ...s,
      services: [
        ...s.services,
        { id: "svc_" + (Date.now() + Math.random().toString(16).slice(2)), name: "", category: "gel", price: "", minutes: "", desc: "" },
      ],
    }));

  const delSvc = (i) =>
    setStore((s) => {
      const services = s.services.slice();
      services.splice(i, 1);
      return { ...s, services };
    });

  const setSvc = (i, key, val) =>
    setStore((s) => {
      const services = s.services.slice();
      services[i] = { ...services[i], [key]: val };
      return { ...s, services };
    });

  const deriveServiceTags = (services) => {
    const tags = new Set();
    services.forEach((s) => {
      const c = (s.category || "").toLowerCase();
      if (c.includes("gel")) tags.add("‡πÄ‡∏à‡∏•‡∏°‡∏∑‡∏≠");
      if (c.includes("paint")) tags.add("‡πÄ‡∏û‡πâ‡∏ô‡∏ó‡πå");
      if (c.includes("spa")) tags.add("‡∏™‡∏õ‡∏≤");
      if ((s.name || "").includes("‡∏ï‡πà‡∏≠")) tags.add("‡∏ï‡πà‡∏≠‡πÄ‡∏•‡πá‡∏ö");
    });
    return tags.size ? Array.from(tags) : ["‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÄ‡∏•‡πá‡∏ö"];
  };

  // ===== Save / Preview =====
  const validate = () => {
    const errs = [];
    if (!store.name.trim()) errs.push("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô");
    if (!store.area.trim()) errs.push("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà");
    if (store.priceFrom === "" || Number(store.priceFrom) < 0) errs.push("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô");
    if (!store.address.trim()) errs.push("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà");
    if (!store.images.length) errs.push("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏π‡∏õ");
    if (!store.services.length) errs.push("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£");
    const svcInvalid = store.services.find((s) => !s.name || !s.category || !s.price || !s.minutes);
    if (svcInvalid) errs.push("‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö (‡∏ä‡∏∑‡πà‡∏≠/‡∏´‡∏°‡∏ß‡∏î/‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏ô‡∏≤‡∏ó‡∏µ)");
    return errs;
  };

  const saveStore = () => {
    const errs = validate();
    if (errs.length) {
      alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ:\n- " + errs.join("\n- "));
      return;
    }
    const key = "customShops";
    const list = JSON.parse(localStorage.getItem(key) || "[]");

    const summary = {
      id: store.id,
      name: store.name,
      area: store.area,
      services: deriveServiceTags(store.services),
      price: Number(store.priceFrom) || 0,
      rating: store.rating ? Number(store.rating) : 4.7,
      distance: 1.0,
      hot: true,
      img: store.images[0],
    };
    const detail = { ...store };
    list.push({ summary, detail });
    localStorage.setItem(key, JSON.stringify(list));

    sessionStorage.setItem("storePreview", JSON.stringify(detail));
    showToast("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ üéâ");
  };

  const goPreview = () => {
    sessionStorage.setItem("storePreview", JSON.stringify(store));
    window.location.href = "store2.html";
  };

  return (
    <div className="nf-add">
      <main className="container">
        <div className="grid">
          {/* LEFT: PREVIEW */}
          <aside className="left">
            <div className="card">
              <div className="card-head">
                <strong>‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏£‡πâ‡∏≤‡∏ô</strong>
                <div className="badge">
                  {store.rating ? `‡πÄ‡∏£‡∏ï‡∏ï‡∏¥‡πâ‡∏á ${(+store.rating).toFixed(2)}` : "‡πÄ‡∏£‡∏ï‡∏ï‡∏¥‡πâ‡∏á ‚Äî"}
                </div>
              </div>
              <div className="card-body" style={{ paddingBottom: 6 }}>
                <div className="hero">
                  <img
                    src={
                      store.images[0] ||
                      "https://images.unsplash.com/photo-1605979257913-d990e91f4a3b?q=80&w=1400"
                    }
                    alt="preview"
                  />
                  <div className="glow">
                    <span className="price">
                      {store.priceFrom !== "" ? `‡πÄ‡∏£‡∏¥‡πà‡∏° ‡∏ø${Number(store.priceFrom).toLocaleString("th-TH")}` : "‡πÄ‡∏£‡∏¥‡πà‡∏° ‡∏ø‚Äî"}
                    </span>
                    <span className="pill">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß</span>
                  </div>
                </div>

                <div className="title">
                  <h2>{store.name || "‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"}</h2>
                  <span className="chip">{store.area || "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà"}</span>
                </div>

                <div id="pTags" className="tagwrap" style={{ margin: "6px 16px" }}>
                  {store.tags.slice(0, 5).map((t, i) => (
                    <span key={i} className="chip">{t}</span>
                  ))}
                </div>

                <div className="thumbs">{renderImages}</div>

                <div className="meta-row">
                  <span className="ok">‚Ä¢ ‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î: {store.hours || "‚Äî"}</span>
                  <span className="muted">‚Ä¢ ‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å: {store.amenities.length ? store.amenities.join(", ") : "‚Äî"}</span>
                </div>

                <div style={{ display: "flex", gap: ".6rem", flexWrap: "wrap", margin: "10px 16px 4px" }}>
                  <a className="btn" href="store2.html">‡∏î‡∏π‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô</a>
                </div>
              </div>
            </div>
          </aside>

          {/* RIGHT: FORM */}
          <section className="card">
            <div className="card-head">
              <div>
                <strong>‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô</strong>
                <div className="note">‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏à‡∏≠‡∏á‡πà‡∏≤‡∏¢</div>
              </div>
              <div style={{ minWidth: 240 }}>
                <div className="progress"><div className="bar" style={{ width: `${progressPct}%` }} /></div>
                <div className="note" style={{ textAlign: "right", marginTop: ".25rem" }}>
                  ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô {progressPct}%
                </div>
              </div>
            </div>

            <div className="card-body">
              {/* A: Basic */}
              <div className="row">
                <div>
                  <label className="req">‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô</label>
                  <input
                    type="text"
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô GlamNail Studio"
                    value={store.name}
                    onChange={(e) => update({ name: e.target.value })}
                  />
                </div>
                <div>
                  <label className="req">‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà</label>
                  <select
                    value={store.area}
                    onChange={(e) => update({ area: e.target.value })}
                  >
                    <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà</option>
                    <option>‡∏™‡∏¢‡∏≤‡∏°</option>
                    <option>‡∏≠‡∏≤‡∏£‡∏µ‡∏¢‡πå</option>
                    <option>‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô</option>
                    <option>‡∏•‡∏≤‡∏î‡∏û‡∏£‡πâ‡∏≤‡∏ß</option>
                  </select>
                </div>
                <div>
                  <label className="req">‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏ø)</label>
                  <input
                    type="number"
                    min="0"
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô 650"
                    value={store.priceFrom}
                    onChange={(e) => update({ priceFrom: e.target.value })}
                  />
                </div>
                <div>
                  <label>‡πÄ‡∏£‡∏ï‡∏ï‡∏¥‡πâ‡∏á (0‚Äì5)</label>
                  <input
                    type="number"
                    min="0" max="5" step="0.01"
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô 4.85"
                    value={store.rating}
                    onChange={(e) => update({ rating: e.target.value })}
                  />
                </div>
              </div>

              {/* B: Location/Hours */}
              <div className="row" style={{ marginTop: 12 }}>
                <div>
                  <label className="req">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</label>
                  <input
                    type="text"
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô 123 ‡∏ñ‡∏ô‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏†‡∏≤‡∏û ‡∏ï.‡πÉ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏≠.‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏à.‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô"
                    value={store.address}
                    onChange={(e) => update({ address: e.target.value })}
                  />
                </div>
                <div>
                  <label>‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà Google</label>
                  <input
                    type="url"
                    placeholder="https://maps.google.com/..."
                    value={store.mapUrl}
                    onChange={(e) => update({ mapUrl: e.target.value })}
                  />
                  <div className="note">‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡∏ô</div>
                </div>
              </div>

              <div className="row" style={{ marginTop: 12 }}>
                <div>
                  <label>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£</label>
                  <input
                    type="text"
                    placeholder="‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô 10:00‚Äì20:00"
                    value={store.hours}
                    onChange={(e) => update({ hours: e.target.value })}
                  />
                </div>
                <div>
                  <label>‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å</label>
                  <input
                    type="text"
                    placeholder="‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ, ‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£, ‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°"
                    onChange={(e) =>
                      update({
                        amenities: e.target.value
                          .split(",")
                          .map((x) => x.trim())
                          .filter(Boolean),
                      })
                    }
                  />
                </div>
              </div>

              {/* C: Media/Tags */}
              <div className="row" style={{ marginTop: 12 }}>
                <div>
                  <label>‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏£‡πâ‡∏≤‡∏ô</label>
                  <div className="field-group" style={{ margin: ".5rem 0" }}>
                    <input id="imgUrl" type="url" placeholder="‡∏ß‡∏≤‡∏á '‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á' ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î +"
                      onKeyDown={(e) => {
                        if (e.key === "Enter") {
                          e.preventDefault();
                          const v = e.currentTarget.value.trim();
                          if (v) addImageUrl(v);
                          e.currentTarget.value = "";
                        }
                      }}
                    />
                    <button
                      className="btn btn-ghost"
                      type="button"
                      onClick={() => {
                        const inp = document.getElementById("imgUrl");
                        const v = (inp?.value || "").trim();
                        if (v) addImageUrl(v);
                        if (inp) inp.value = "";
                      }}
                    >
                      + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ (‡∏•‡∏¥‡∏á‡∏Å‡πå)
                    </button>
                  </div>

                  <div style={{ display: "flex", gap: ".6rem", alignItems: "center", margin: ".4rem 0" }}>
                    <input ref={imgFileRef} type="file" accept="image/*" multiple onChange={(e) => { handleFiles(e.target.files); e.target.value = ""; }} />
                    <button
                      className="btn btn-sm btn-long"
                      type="button"
                      onClick={() => imgFileRef.current?.click()}
                    >
                      ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
                    </button>
                  </div>

                  <div id="dropZone" ref={dropZoneRef} className="dropZone">
                    ‡∏•‡∏≤‡∏Å-‡∏ß‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ)
                  </div>

                  <div className="thumbs" style={{ margin: "10px 0 .2rem" }}>
                    {store.images.map((src, i) => (
                      <div key={i} style={{ position: "relative" }}>
                        <img
                          src={src}
                          alt=""
                          style={{
                            height: 74,
                            width: "100%",
                            objectFit: "cover",
                            border: "1px solid var(--stroke)",
                            borderRadius: 10,
                          }}
                        />
                        <button
                          type="button"
                          className="btn btn-sm"
                          style={{ position: "absolute", top: 6, right: 6, padding: ".2rem .5rem" }}
                          onClick={() => removeImg(i)}
                        >
                          ‡∏•‡∏ö
                        </button>
                      </div>
                    ))}
                  </div>

                  <div className="note">
                    ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏†‡∏≤‡∏û‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô ‚â• 1200px ‚Ä¢ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö .jpg/.png/.webp ‚Ä¢ ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô URL ‡∏£‡∏π‡∏õ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                  </div>
                </div>

                <div>
                  <label>‡πÅ‡∏ó‡πá‡∏Å/‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô</label>
                  <input
                    type="text"
                    placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏ó‡πá‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°"
                    onKeyDown={(e) => {
                      if (e.key === "Enter") {
                        e.preventDefault();
                        const v = e.currentTarget.value.trim();
                        if (!v) return;
                        setStore((s) => ({ ...s, tags: [...s.tags, v] }));
                        e.currentTarget.value = "";
                      }
                    }}
                  />
                  <div className="tagwrap">
                    {store.tags.map((t, i) => (
                      <span key={i} className="chip">
                        {t}
                        <span
                          style={{ cursor: "pointer", fontWeight: 700, opacity: 0.7, marginLeft: 6 }}
                          onClick={() => removeTag(i)}
                          title="‡∏•‡∏ö‡πÅ‡∏ó‡πá‡∏Å"
                        >
                          √ó
                        </span>
                      </span>
                    ))}
                  </div>
                </div>
              </div>

              {/* D: Services */}
              <div style={{ marginTop: 16 }}>
                <div className="field-inline" style={{ justifyContent: "space-between" }}>
                  <label className="req" style={{ margin: 0 }}>
                    ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô
                  </label>
                  <button className="btn btn-ghost" type="button" onClick={addSvc}>
                    + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
                  </button>
                </div>
                <div className="note">
                  ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‡∏´‡∏°‡∏ß‡∏î (gel/paint/spa) ‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥ (‡∏ô‡∏≤‡∏ó‡∏µ) ‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏° ‚Äú‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‚Äù ‡πÉ‡∏ï‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ
                </div>

                <div className="list" style={{ marginTop: ".7rem" }}>
                  {store.services.length === 0 ? (
                    <div className="muted">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‡∏Å‡∏î ‚Äú+ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‚Äù ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</div>
                  ) : (
                    store.services.map((s, i) => (
                      <div key={s.id} className="svc">
                        <div className="svc-top">
                          <input
                            name="name"
                            type="text"
                            placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"
                            value={s.name}
                            onChange={(e) => setSvc(i, "name", e.target.value)}
                          />
                          <input
                            name="category"
                            type="text"
                            placeholder="‡∏´‡∏°‡∏ß‡∏î (gel/paint/spa)"
                            value={s.category}
                            onChange={(e) => setSvc(i, "category", e.target.value)}
                          />
                          <input
                            name="price"
                            type="number"
                            placeholder="‡∏£‡∏≤‡∏Ñ‡∏≤"
                            value={s.price}
                            onChange={(e) => setSvc(i, "price", e.target.value)}
                          />
                          <input
                            name="minutes"
                            type="number"
                            placeholder="‡∏ô‡∏≤‡∏ó‡∏µ"
                            value={s.minutes}
                            onChange={(e) => setSvc(i, "minutes", e.target.value)}
                            onKeyDown={(e) => {
                              if (e.key === "Enter") {
                                e.preventDefault();
                                addSvc();
                              }
                            }}
                          />
                          <button type="button" className="del" title="‡∏•‡∏ö" onClick={() => delSvc(i)}>
                            üóëÔ∏è
                          </button>
                        </div>
                        <div className="svc-desc">
                          <textarea
                            name="desc"
                            placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î/‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡∏¥‡∏° ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡πÄ‡∏à‡∏• 1 ‡πÇ‡∏ó‡∏ô ‡∏ü‡∏£‡∏µ‡∏ï‡∏∞‡πÑ‡∏ö ‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡∏°‡∏¥‡∏ô‡∏¥‡∏°‡∏≠‡∏• ..."
                            value={s.desc}
                            onChange={(e) => setSvc(i, "desc", e.target.value)}
                          />
                        </div>
                      </div>
                    ))
                  )}
                </div>
              </div>

              <div style={{ display: "flex", gap: ".6rem", flexWrap: "wrap", marginTop: 18 }}>
                <button onClick={saveStore} className="btn btn-primary">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡πâ‡∏≤‡∏ô</button>
                <button onClick={goPreview} className="btn">‡∏î‡∏π‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á</button>
              </div>
            </div>
          </section>
        </div>
      </main>

      <div id="nf-toast" className="toast">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß</div>
    </div>
  );
}
